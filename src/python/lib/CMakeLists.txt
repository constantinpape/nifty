#FIND_PACKAGE(PYBIND_ELEVEN REQUIRED)
#include_directories(${PYBIND_ELEVEN_INCLUDE_DIR})
# Add a CMake parameter for choosing a desired Python version
set(PYTHON_VERSION "" CACHE STRING "Python version to use for compiling the example library")


# Try to autodetect Python (can be overridden manually if needed)
set(Python_ADDITIONAL_VERSIONS 3.4 3.5 3.6)
find_package(PythonLibs ${PYTHON_VERSION} REQUIRED)



if (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  # Enable C++11 mode on C++ / Clang
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

  # Enable link time optimization and set the default symbol
  # visibility to hidden (very important to obtain small binaries)
  if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)
    # Default symbol visibility
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")

    # Check for Link Time Optimization support
    #CHECK_CXX_COMPILER_FLAG("-flto" HAS_LTO_FLAG)
    #if (HAS_LTO_FLAG)
    #  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto")
    #endif()
  endif()
endif()

# Include path for Python header files
include_directories(${PYTHON_INCLUDE_DIR})



# Create the binding library
add_library(_nifty SHARED
    nifty.cxx
    #############################
    # graph module
    #############################
    # ... extra files go here ...
    graph/graph.cxx
    graph/undirected_list_graph.cxx
    graph/edge_contraction_graph_undirected_graph.cxx
    # rag
    graph/rag/rag.cxx
    graph/rag/grid_rag.cxx
    graph/rag/graph_accumulator.cxx
    graph/rag/project_to_pixels.cxx
    graph/rag/accumulate.cxx
    # agglo
    graph/agglo/agglo.cxx
    graph/agglo/agglomerative_clustering.cxx
    # gala
    graph/gala/gala.cxx
    graph/gala/gala_main_class.cxx
    graph/gala/gala_feature_base.cxx
    # multicut
    graph/multicut/multicut.cxx
    graph/multicut/multicut_objective.cxx
    graph/multicut/multicut_visitor_base.cxx
    graph/multicut/multicut_base.cxx
    graph/multicut/multicut_factory.cxx
    graph/multicut/multicut_ilp.cxx
    graph/multicut/multicut_greedy_additive.cxx
    graph/multicut/fusion_move_based.cxx
    graph/multicut/perturb_and_map.cxx

    #############################
    # hdf5
    #############################
    hdf5/hdf5.cxx
    hdf5/hdf5_common.cxx
    hdf5/hdf5_array.cxx
)




if(WITH_HDF5)
    target_link_libraries(_nifty ${HDF5_LIBRARIES})
endif()

if(WITH_GUROBI)
    target_link_libraries(_nifty ${GUROBI_LIBRARIES})
endif()

if(WITH_CPLEX)
    target_link_libraries(_nifty ${CPLEX_LIBRARIES})
endif()

if(WITH_GLPK)
    target_link_libraries(_nifty ${GLPK_LIBRARY})
endif()


# Don't add a 'lib' prefix to the shared library
set_target_properties(_nifty PROPERTIES PREFIX "")

# Link against the Python shared library
target_link_libraries(_nifty ${PYTHON_LIBRARY})

if (WIN32)
    if (MSVC)
        # Enforce size-based optimization and link time code generation
        # on MSVC (~30% smaller binaries in experiments). /bigobj is needed
        # for bigger binding projects due to the limit to 64k addressable sections
        # /MP enables multithreaded builds (relevant when there are many files).
        set_target_properties(_nifty PROPERTIES COMPILE_FLAGS "/Os /GL /MP /bigobj")
        set_target_properties(_nifty PROPERTIES LINK_FLAGS "/LTCG")
    endif()
    # .PYD file extension on Windows
    set_target_properties(_nifty PROPERTIES SUFFIX ".pyd")
elseif (UNIX)
    # It's quite common to have multiple copies of the same Python version
    # installed on one's system. E.g.: one copy from the OS and another copy
    # that's statically linked into an application like Blender or Maya.
    # If we link our plugin library against the OS Python here and import it
    # into Blender or Maya later on, this will cause segfaults when multiple
    # conflicting Python instances are active at the same time.

    # Windows is not affected by this issue since it handles DLL imports
    # differently. The solution for Linux and Mac OS is simple: we just don't
    # link against the Python library. The resulting shared library will have
    # missing symbols, but that's perfectly fine -- they will be resolved at
    # import time.

    # .SO file extension on Linux/Mac OS
    set_target_properties(_nifty PROPERTIES SUFFIX ".so")

    # Strip unnecessary sections of the binary on Linux/Mac OS
    if(APPLE)
        set_target_properties(_nifty PROPERTIES MACOSX_RPATH ".")
        #set_target_properties(_nifty PROPERTIES LINK_FLAGS "-undefined dynamic_lookup -dead_strip")
        if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)
            add_custom_command(TARGET _nifty POST_BUILD COMMAND strip -u -r ${CMAKE_CURRENT_BINARY_DIR}/_nifty.so)
        endif()
    else()
        if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)
            add_custom_command(TARGET _nifty POST_BUILD COMMAND strip ${CMAKE_CURRENT_BINARY_DIR}/_nifty.so)
        endif()
    endif()
endif()

file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/python/nifty)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/test_python/)

ADD_CUSTOM_COMMAND(
        TARGET _nifty
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different $<TARGET_FILE:_nifty> ${CMAKE_BINARY_DIR}/python/nifty/
        COMMENT "Copying target _graph to temporary module directory")

add_custom_target(copy_python__init__ ALL#POST_BUILD
    COMMAND cmake -E copy_if_different 
    ${CMAKE_SOURCE_DIR}/src/python/module/__init__.py 
    ${CMAKE_BINARY_DIR}/python/nifty/__init__.py)



add_custom_target(copy_python_test ALL#POST_BUILD
    COMMAND cmake -E copy_if_different 
    ${CMAKE_SOURCE_DIR}/src/python/test/test_python.py 
    ${CMAKE_BINARY_DIR}/test_python/test_python.py)

